// Generated by CoffeeScript 1.12.7
(function() {
  var DocArchive, DocManager, HealthChecker, HttpController, Settings, logger;

  DocManager = require("./DocManager");

  logger = require("logger-sharelatex");

  DocArchive = require("./DocArchiveManager");

  HealthChecker = require("./HealthChecker");

  Settings = require("settings-sharelatex");

  module.exports = HttpController = {
    getDoc: function(req, res, next) {
      var doc_id, include_deleted, project_id, ref;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      doc_id = req.params.doc_id;
      include_deleted = ((ref = req.query) != null ? ref.include_deleted : void 0) === "true";
      logger.log({
        project_id: project_id,
        doc_id: doc_id
      }, "getting doc");
      return DocManager.getFullDoc(project_id, doc_id, function(error, doc) {
        if (error != null) {
          return next(error);
        }
        logger.log({
          doc_id: doc_id,
          project_id: project_id
        }, "got doc");
        if (doc == null) {
          return res.send(404);
        } else if (doc.deleted && !include_deleted) {
          return res.send(404);
        } else {
          return res.json(HttpController._buildDocView(doc));
        }
      });
    },
    getRawDoc: function(req, res, next) {
      var doc_id, project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      doc_id = req.params.doc_id;
      logger.log({
        project_id: project_id,
        doc_id: doc_id
      }, "getting raw doc");
      return DocManager.getDocLines(project_id, doc_id, function(error, doc) {
        if (error != null) {
          return next(error);
        }
        if (doc == null) {
          return res.send(404);
        } else {
          res.setHeader('content-type', 'text/plain');
          return res.send(HttpController._buildRawDocView(doc));
        }
      });
    },
    getAllDocs: function(req, res, next) {
      var project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      logger.log({
        project_id: project_id
      }, "getting all docs");
      return DocManager.getAllNonDeletedDocs(project_id, {
        lines: true,
        rev: true
      }, function(error, docs) {
        if (docs == null) {
          docs = [];
        }
        if (error != null) {
          return next(error);
        }
        return res.json(HttpController._buildDocsArrayView(project_id, docs));
      });
    },
    getAllRanges: function(req, res, next) {
      var project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      logger.log({
        project_id: project_id
      }, "getting all ranges");
      return DocManager.getAllNonDeletedDocs(project_id, {
        ranges: true
      }, function(error, docs) {
        if (docs == null) {
          docs = [];
        }
        if (error != null) {
          return next(error);
        }
        return res.json(HttpController._buildDocsArrayView(project_id, docs));
      });
    },
    updateDoc: function(req, res, next) {
      var bodyLength, doc_id, lines, project_id, ranges, ref, ref1, ref2, version;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      doc_id = req.params.doc_id;
      lines = (ref = req.body) != null ? ref.lines : void 0;
      version = (ref1 = req.body) != null ? ref1.version : void 0;
      ranges = (ref2 = req.body) != null ? ref2.ranges : void 0;
      if ((lines == null) || !(lines instanceof Array)) {
        logger.error({
          project_id: project_id,
          doc_id: doc_id
        }, "no doc lines provided");
        res.send(400);
        return;
      }
      if ((version == null) || typeof version === !"number") {
        logger.error({
          project_id: project_id,
          doc_id: doc_id
        }, "no doc version provided");
        res.send(400);
        return;
      }
      if (ranges == null) {
        logger.error({
          project_id: project_id,
          doc_id: doc_id
        }, "no doc ranges provided");
        res.send(400);
        return;
      }
      bodyLength = lines.reduce((function(_this) {
        return function(len, line) {
          return line.length + len;
        };
      })(this), 0);
      if (bodyLength > Settings.max_doc_length) {
        logger.error({
          project_id: project_id,
          doc_id: doc_id,
          bodyLength: bodyLength
        }, "document body too large");
        res.status(413).send("document body too large");
        return;
      }
      logger.log({
        project_id: project_id,
        doc_id: doc_id
      }, "got http request to update doc");
      return DocManager.updateDoc(project_id, doc_id, lines, version, ranges, function(error, modified, rev) {
        if (error != null) {
          return next(error);
        }
        return res.json({
          modified: modified,
          rev: rev
        });
      });
    },
    deleteDoc: function(req, res, next) {
      var doc_id, project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      doc_id = req.params.doc_id;
      logger.log({
        project_id: project_id,
        doc_id: doc_id
      }, "deleting doc");
      return DocManager.deleteDoc(project_id, doc_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.send(204);
      });
    },
    _buildDocView: function(doc) {
      var attribute, doc_view, i, len1, ref, ref1;
      doc_view = {
        _id: (ref = doc._id) != null ? ref.toString() : void 0
      };
      ref1 = ["lines", "rev", "version", "ranges", "deleted"];
      for (i = 0, len1 = ref1.length; i < len1; i++) {
        attribute = ref1[i];
        if (doc[attribute] != null) {
          doc_view[attribute] = doc[attribute];
        }
      }
      return doc_view;
    },
    _buildRawDocView: function(doc) {
      return ((doc != null ? doc.lines : void 0) || []).join("\n");
    },
    _buildDocsArrayView: function(project_id, docs) {
      var doc, docViews, i, len1;
      docViews = [];
      for (i = 0, len1 = docs.length; i < len1; i++) {
        doc = docs[i];
        if (doc != null) {
          docViews.push(HttpController._buildDocView(doc));
        } else {
          logger.error({
            err: new Error("null doc"),
            project_id: project_id
          }, "encountered null doc");
        }
      }
      return docViews;
    },
    archiveAllDocs: function(req, res, next) {
      var project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      logger.log({
        project_id: project_id
      }, "archiving all docs");
      return DocArchive.archiveAllDocs(project_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.send(204);
      });
    },
    unArchiveAllDocs: function(req, res, next) {
      var project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      logger.log({
        project_id: project_id
      }, "unarchiving all docs");
      return DocArchive.unArchiveAllDocs(project_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.send(200);
      });
    },
    destroyAllDocs: function(req, res, next) {
      var project_id;
      if (next == null) {
        next = function(error) {};
      }
      project_id = req.params.project_id;
      logger.log({
        project_id: project_id
      }, "destroying all docs");
      return DocArchive.destroyAllDocs(project_id, function(error) {
        if (error != null) {
          return next(error);
        }
        return res.send(204);
      });
    },
    healthCheck: function(req, res) {
      return HealthChecker.check(function(err) {
        if (err != null) {
          logger.err({
            err: err
          }, "error performing health check");
          return res.send(500);
        } else {
          return res.send(200);
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=HttpController.js.map
