// Generated by CoffeeScript 1.12.7
(function() {
  var ObjectId, _, async, crypto, db, logger, port, ref, request, settings;

  ref = require("./mongojs"), db = ref.db, ObjectId = ref.ObjectId;

  request = require("request");

  async = require("async");

  _ = require("underscore");

  crypto = require("crypto");

  settings = require("settings-sharelatex");

  port = settings.internal.docstore.port;

  logger = require("logger-sharelatex");

  module.exports = {
    check: function(callback) {
      var doc_id, getOpts, jobs, lines, project_id, url;
      doc_id = ObjectId();
      project_id = ObjectId(settings.docstore.healthCheck.project_id);
      url = "http://localhost:" + port + "/project/" + project_id + "/doc/" + doc_id;
      lines = ["smoke test - delete me", "" + (crypto.randomBytes(32).toString("hex"))];
      getOpts = function() {
        return {
          url: url,
          timeout: 3000
        };
      };
      logger.log({
        lines: lines,
        url: url,
        doc_id: doc_id,
        project_id: project_id
      }, "running health check");
      jobs = [
        function(cb) {
          var opts;
          opts = getOpts();
          opts.json = {
            lines: lines,
            version: 42,
            ranges: {}
          };
          return request.post(opts, cb);
        }, function(cb) {
          var opts;
          opts = getOpts();
          opts.json = true;
          return request.get(opts, function(err, res, body) {
            if (err != null) {
              logger.err({
                err: err
              }, "docstore returned a error in health check get");
              return cb(err);
            } else if (res == null) {
              return cb("no response from docstore with get check");
            } else if ((res != null ? res.statusCode : void 0) !== 200) {
              return cb("status code not 200, its " + res.statusCode);
            } else if (_.isEqual(body != null ? body.lines : void 0, lines) && (body != null ? body._id : void 0) === doc_id.toString()) {
              return cb();
            } else {
              return cb("health check lines not equal " + body.lines + " != " + lines);
            }
          });
        }, function(cb) {
          return db.docs.remove({
            _id: doc_id,
            project_id: project_id
          }, cb);
        }, function(cb) {
          return db.docOps.remove({
            doc_id: doc_id
          }, cb);
        }
      ];
      return async.series(jobs, callback);
    }
  };

}).call(this);

//# sourceMappingURL=HealthChecker.js.map
